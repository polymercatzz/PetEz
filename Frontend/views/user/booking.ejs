<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PetEz</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Thai:wght@100..900&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body{
            font-family: "Noto Sans Thai", sans-serif;
        }
        .pet-card{
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 12px 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
            transition: all 0.2s ease;
        }
        .pet-card:hover{
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .remove-btn{
            background-color: #ef4444;
            color: white;
            border: none;
            border-radius: 50%;
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s;
        }
        .remove-btn:hover{
            background-color: #dc2626;
        }
        .selected-pets-container{
            min-height: 60px;
            padding: 12px;
            border: 1px dashed #d1d5db;
            border-radius: 12px;
            background-color: #f9fafb;
        }
    </style>
</head>
<body class="bg-[#F9F9FB]">
    <%- include('../partials/user-nav') %>
    <% const svc = (typeof service !== 'undefined' && service) ? service : null; %>
    <div id="pageMeta" data-service="<%- encodeURIComponent(JSON.stringify(svc || null)) %>" hidden></div>

    <div class="flex flex-col justify-center items-start mx-auto mt-10 mb-5 w-[80%]">
    <a href="/user/"><button class="px-16 py-2 text-[1.3rem] text-blue-600 rounded-2xl shadow-sm cursor-pointer bg-white border border-blue-600 transition duration-300 ease-in-out shadow-[0_5px_15px_rgba(37,99,235,0.3)] hover:-translate-y-1 hover:shadow-[0_8px_20px_rgba(37,99,235,0.4)]">back</button></a>
    </div>

    <div class="flex flex-col justify-center items-start mb-10 mx-auto px-5 py-10 w-[80%] border border-gray-200 rounded-xl shadow-sm">
        <div class="w-full mb-10">
            <p class="text-[1.8rem] font-bold"><%= svc ? svc.service_type : 'บริการ' %></p>
            <h1 class="text-[1.2rem] text-gray-800 mb-3">รหัสบริการ: <%= svc ? svc.service_id : '-' %></h1>
            <div class="w-full h-[1px] bg-gray-300"></div>
        </div>
        <div class="grid grid-cols-2 gap-3 w-full">
            <div class="w-full">
                <img src="../static/bg1.jpg" class="w-[90%] h-[400px] object-cover rounded-xl">
                <div class="flex justify-start items-center gap-3 pt-3 text-gray-600">
                    <i class="fa-solid fa-location-dot fa-lg"></i>
                    <p class="text-[1.3rem] font-medium"><%= (typeof sitterUser !== 'undefined' && sitterUser) ? ((sitterUser.province || '-') + (sitterUser.district ? ' ' + sitterUser.district : '')) : '-' %></p>
                </div>
                <div class="w-[90%] h-[1px] bg-gray-300  my-3"></div>
                <div class="flex flex-col justify-start items-start gap-5">
                    <h1 class="text-[1.7rem] font-medium">ข้อมูลติดต่อ</h1>
                    <div class="flex justify-start items-center gap-2 ml-5">
                        <i class="fa-solid fa-building fa-xl"></i>
                        <p><%= (typeof sitterUser !== 'undefined' && sitterUser && sitterUser.full_name) ? sitterUser.full_name : '-' %></p>
                    </div>
                    <div class="flex justify-start items-center gap-2 ml-5">
                        <i class="fa-solid fa-phone fa-xl"></i>
                        <p><%= (typeof sitterUser !== 'undefined' && sitterUser && sitterUser.phone) ? sitterUser.phone : '-' %></p>
                    </div>
                    <div class="flex justify-start items-center gap-2 ml-5">
                        <img src="../static/line.png" class="w-6 h-6">
                        <p>-</p>
                    </div>
                    <div class="flex justify-start items-center gap-2 ml-5">
                        <i class="fa-solid fa-envelope fa-xl"></i>
                        <p><%= (typeof sitterUser !== 'undefined' && sitterUser && sitterUser.email) ? sitterUser.email : '-' %></p>
                    </div>
                    <div class="flex justify-start items-center gap-2 ml-5">
                        <i class="fa-solid fa-clock fa-xl"></i>
                        <p><%= svc && svc.availability ? 'เปิดรับงาน' : 'ปิดรับงาน' %></p>
                    </div>
                </div>
            </div>
            <div class="flex flex-col w-[90%]">
                <h1 class="text-[2rem] font-medium mb-3">รายละเอียดงาน</h1>
                <div class="mb-4">
                    <label class="block mb-1 text-gray-700 font-medium">วันเริ่มต้น</label>
                    <div class="flex items-center border border-gray-300 rounded-lg px-4 py-2 focus-within:ring-2 focus-within:ring-[#4e54c8]">
                        <i class="fa-solid fa-calendar text-gray-400 mr-3"></i>
                        <input id="startDate" type="date" class="flex-1 outline-none text-gray-700" required>
                    </div>
                </div>
                <div class="mb-4">
                    <label class="block mb-1 text-gray-700 font-medium">วันที่สิ้นสุด</label>
                    <div class="flex items-center border border-gray-300 rounded-lg px-4 py-2 focus-within:ring-2 focus-within:ring-[#4e54c8]">
                        <i class="fa-solid fa-calendar text-gray-400 mr-3"></i>
                        <input id="endDate" type="date" class="flex-1 outline-none text-gray-700" required>
                    </div>
                </div>
                <div class="mb-4">
                    <label class="block mb-1 text-gray-700 font-medium">เวลาเริ่มงาน</label>
                    <div class="flex items-center border border-gray-300 rounded-lg px-4 py-2 focus-within:ring-2 focus-within:ring-[#4e54c8]">
                        <i class="fa-solid fa-clock text-gray-400 mr-3"></i>
                        <input id="startTime" type="time" class="flex-1 outline-none text-gray-700" required>
                    </div>
                </div>
                <div class="mb-4 w-full">
                    <label class="block mb-1 text-gray-700 font-medium">ที่อยู่</label>
                    <textarea id="address" placeholder="กรุณากรอกที่อยู่" class=" w-full flex-1 outline-none border border-gray-300 rounded-md px-3 py-2 text-gray-700 text-base resize-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"></textarea>
                </div>
                <div class="mb-4 w-full">
                    <label class="block mb-1 text-gray-700 font-medium">หมายเหตุเพิ่มเติม</label>
                    <textarea id="note" placeholder="กรุณากรอกหมายเหตุ (ถ้ามี)" class=" w-full flex-1 outline-none border border-gray-300 rounded-md px-3 py-2 text-gray-700 text-base resize-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"></textarea>
                </div>

                <h1 class="text-[2rem] font-medium mb-3">สัตว์เลี้ยงที่จะใช้บริการ</h1>
                <div class="mb-4 w-full">
                    <label class="flex items-center gap-3 text-lg">สัตว์เลี้ยงของคุณ</label>
                    <select id="petSelect" class="w-full border-2 border-[#e2e8f0] rounded-2xl text-[1rem] px-5 py-2 transition duration-300 ease-in-out focus:outline-none focus:border-[#3b5bdb] focus:shadow-[0_0_0_4px_rgba(59,91,219,0.1)]">
                        <option value="" disabled selected>เลือกสัตว์เลี้ยง</option>
                        <% if (Array.isArray(pets)) { %>
                            <% pets.forEach(p => { %>
                                <option value="<%= p.pet_id %>"><%= p.name %> (<%= p.type %><% if (p.breed) { %> - <%= p.breed %><% } %>)</option>
                            <% }) %>
                        <% } %>
                    </select>
                </div>
                <div class="w-full mb-4">
                    <label class="flex items-center gap-3 text-lg">สัตว์เลี้ยงที่เลือก</label>
                    <div id="selectedPets" class="selected-pets-container"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="grid grid-cols-2 gap-5 mx-auto w-[80%]">
        <div class="px-10 flex flex-col bg-gray-100 border border-gray-200 rounded-xl shadow-sm my-10 w-full gap-3">
            <h1 class="flex items-center justify-center text-[1.7rem] text-[#3b5bdb] font-bold mt-5">สรุปรายการเช่าซื้อ</h1>
            <div class="flex justify-between">
                <p>ราคาต่อชั่วโมง:</p>
                <p id="rateText"><%= svc && svc.price_per_hour ? svc.price_per_hour : 50 %> บาท</p>
            </div>
            <hr class="h-[1px] bg-gray-300 border-0" />
            <div class="flex justify-between">
                <p>จำนวนชั่วโมง (ประมาณ):</p>
                <p id="hoursText">0 ชั่วโมง</p>
            </div>
            <hr class="h-[1px] bg-gray-300 border-0" />
            <div class="flex justify-between">
                <p>จำนวนสัตว์:</p>
                <p id="petsText">0 ตัว</p>
            </div>
            <hr class="h-[1px] bg-gray-300 border-0" />
            <div class="flex justify-between">
                <p>Vat 7%:</p>
                <p id="vatText">0 บาท</p>
            </div>
            <hr class="h-[1px] bg-gray-300 border-0" />
            <div class="flex justify-between mb-5 text-[1.3rem] font-semibold">
                <p>รวมทั้งหมด:</p>
                <p id="totalText">0 บาท</p>
            </div>
        </div>
        <div class="flex flex-col justify-center items-center gap-3 border border-gray-200 rounded-xl shadow-sm my-10 py-5">
            <h1 class="flex items-center justify-center text-[1.7rem] text-[#3b5bdb] font-bold">ชำระเงิน</h1>
            <p class="flex items-center justify-center gap-3">
                <i class="fa-solid fa-qrcode fa-2xl"></i>
                <span class="text-[1.3rem]">แสกน QR Code เพื่อชำระเงิน</span>
            </p>
            <img src="../static/qrcode.jpg" class="w-40 h-40">
            <p class="text-gray-600 text-[1.1rem]">ใช้แอปพลิเคชันธนาคารบนมือถือสแกน QR Code เพื่อชำระเงิน</p>
            <div class="flex justify-center items-center gap-2">
                <p class="text-[1.2rem]">ส่งหลักฐานการชำระเงิน:</p>
                <input type="file" id="File" accept="image/*" class="hidden">
                <label for="File" class="flex justify-center items-center gap-2 px-7 py-2 rounded-xl shadow-sm text-white text-[1.2rem] bg-blue-600 cursor-pointer transition duration-200 ease-in-out hover:bg-blue-800">
                    <i class="fa-solid fa-file"></i>
                    ส่งหลักฐานที่นี่
                </label>
            </div>
            <div id="FileName" class="flex mt-2 text-gray-700 text-[1rem]"></div>
        </div>
    </div>
    <button id="bookSubmit" class="flex justify-center items-center mx-auto mb-10 w-[10%] py-2 bg-blue-600 text-white text-[1.5rem] rounded-xl transition duration-200 ease-in-out cursor-pointer hover:bg-blue-800">ยืนยัน</button>

    <script>
    const serviceData = JSON.parse(decodeURIComponent((document.getElementById('pageMeta')?.dataset?.service) || 'null'));
    const File = document.getElementById('File');
        const FileName = document.getElementById('FileName');
        File.addEventListener('change', () => {
            const files = Array.from(File.files);
            if(files.length > 0){
                FileName.innerHTML = files.map(f => `ไฟล์: <p>${f.name}</p>`).join('');
            }else{
                FileName.innerHTML = '';
            }
        });


        document.addEventListener('DOMContentLoaded', function() {
            const petSelect = document.getElementById('petSelect');
            const selectedPetsContainer = document.getElementById('selectedPets');
            let selectedPets = [];
            function renderSelectedPets() {
                selectedPetsContainer.innerHTML = '';
                
                if (selectedPets.length === 0) {
                    selectedPetsContainer.innerHTML = '<p class="text-gray-500 text-center py-2">ยังไม่มีสัตว์เลี้ยงที่เลือก</p>';
                    return;
                }
                
                selectedPets.forEach((pet, index) => {
                    const petCard = document.createElement('div');
                    petCard.className = 'pet-card';
                    
                    petCard.innerHTML = `
                        <div>
                            <span class="font-medium">${pet.name}</span>
                            <span class="text-gray-600 text-sm ml-2">${pet.type}</span>
                        </div>
                        <button class="remove-btn" data-index="${index}">
                            <i class="fas fa-times"></i>
                        </button>
                    `;
                    
                    selectedPetsContainer.appendChild(petCard);
                });
                
                document.querySelectorAll('.remove-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        const index = parseInt(this.getAttribute('data-index'));
                        removePet(index);
                    });
                });
            }

            function addPet(petId) {
                const option = Array.from(petSelect.options).find(opt => opt.value === petId);
                if (option) {
                    const text = option.textContent;
                    const match = text.match(/(.+)\s+\((.+)\)/);
                    
                    if (match) {
                        const name = match[1];
                        const type = match[2];
                        selectedPets.push({ id: petId, name, type });
                        renderSelectedPets();
                        updatePetSelect();
                    }
                }
            }

            function removePet(index) {
                selectedPets.splice(index, 1);
                renderSelectedPets();
                updatePetSelect();
            }

            function updatePetSelect() {
                Array.from(petSelect.options).forEach((option, index) => {
                    if (index > 0) {
                        const pid = option.value;
                        option.disabled = selectedPets.some(pet => String(pet.id) === String(pid));
                    }
                });
                
                petSelect.value = "";
            }
            
            petSelect.addEventListener('change', function() {
                if (this.value) {
                    addPet(this.value);
                }
            });
            
            renderSelectedPets();

            function recalc() {
                const d1 = document.getElementById('startDate').value;
                const d2 = document.getElementById('endDate').value;
                const t1 = document.getElementById('startTime').value || '00:00';
                if (!d1 || !d2) return;
                const rate = (serviceData && serviceData.price_per_hour) ? parseFloat(serviceData.price_per_hour) : 50;
                const start = new Date(`${d1}T${t1}:00`);
                const end = new Date(`${d2}T${t1}:00`);
                const hours = Math.max(0, Math.ceil((end - start) / (1000*60*60)));
                const petsCount = Math.max(1, selectedPets.length || 0);
                const base = hours * rate; // could multiply by petsCount if pricing per pet
                const vat = Math.round(base * 0.07);
                const total = base + vat;
                document.getElementById('hoursText').textContent = hours + ' ชั่วโมง';
                document.getElementById('petsText').textContent = petsCount + ' ตัว';
                document.getElementById('vatText').textContent = vat.toLocaleString('th-TH') + ' บาท';
                document.getElementById('totalText').textContent = total.toLocaleString('th-TH') + ' บาท';
            }

            ['startDate','endDate','startTime'].forEach(id => {
                const el = document.getElementById(id);
                if (el) el.addEventListener('change', recalc);
            });
            petSelect.addEventListener('change', recalc);
            recalc();

            document.getElementById('bookSubmit').addEventListener('click', async () => {
                const chosen = selectedPets.length ? selectedPets[0] : null;
                const petId = chosen ? parseInt(chosen.id) : (petSelect.value ? parseInt(petSelect.value) : null);
                if (!petId) { alert('กรุณาเพิ่มสัตว์เลี้ยงอย่างน้อย 1 ตัว'); return; }
                const d1 = document.getElementById('startDate').value;
                const d2 = document.getElementById('endDate').value;
                const t1 = document.getElementById('startTime').value || '00:00';
                if (!d1 || !d2) { alert('กรุณาเลือกวันที่เริ่มและสิ้นสุด'); return; }
                const start_date = new Date(`${d1}T${t1}:00`);
                const end_date = new Date(`${d2}T${t1}:00`);
                const payload = {
                    pet_id: petId,
                    start_date,
                    end_date,
                    service_id: serviceData ? serviceData.service_id : null
                };
                try {
                    const resp = await fetch('/user/api/bookings', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    if (resp.ok) {
                        const data = await resp.json();
                        const booking = data.booking;
                        // Optional: upload proof and record transaction
                        let proofPath = null;
                        if (File.files && File.files.length > 0) {
                            const form = new FormData();
                            form.append('proof', File.files[0]);
                            const up = await fetch('/user/api/payments/upload-proof', { method: 'POST', body: form });
                            if (up.ok) {
                                const upData = await up.json();
                                proofPath = upData.path;
                            }
                        }
                        const rate = (serviceData && serviceData.price_per_hour) ? parseFloat(serviceData.price_per_hour) : 50;
                        const hours = Math.max(0, Math.ceil((end_date - start_date) / (1000*60*60)));
                        const base = hours * rate;
                        const vat = Math.round(base * 0.07);
                        const total = base + vat;
                        await fetch('/user/api/transactions', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ booking_id: booking.booking_id, amount: total, payment_method: 'qr', proof_path: proofPath })
                        });
                        alert('จองสำเร็จ');
                        window.location.href = '/user/history';
                    } else {
                        const err = await resp.json().catch(()=>({ message: 'จองไม่สำเร็จ' }));
                        alert(err.message || 'จองไม่สำเร็จ');
                    }
                } catch (e) {
                    alert('เกิดข้อผิดพลาดในการเชื่อมต่อ');
                }
            });
        });
    </script>
</body>
</html>